package org.proxima.cc.clients;

import org.proxima.cc.clients.bitstamp.Bitstamp;
import org.proxima.cc.clients.btcc.Btcc;
import org.proxima.cc.clients.coinmarketcap.Coinmarketcap;
import org.proxima.cc.clients.okex.Okex;
import org.proxima.cc.clients.yobit.Yobit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

@Component
public class CryptoScheduler {
	final static Logger logger = LoggerFactory.getLogger(CryptoScheduler.class);

	@Autowired
	private Okex okex;
	@Autowired
	private Yobit yobit;
	@Autowired
	private Bitstamp bitstamp;
	@Autowired
	private Btcc btcc;
	@Autowired
	private Coinmarketcap coinmarketcap;
	
	
	///////////////////////////////////////////
	// OKEX				///////////////////////
	///////////////////////////////////////////
	
	@Scheduled(cron = "0 0/3 * * * ?")
	public void insertBTCtoDBfromOKEX() throws Exception {
		logger.info("-----------------------------OKEX--------------------------------");
		okex.insertBTCtoDB();
		logger.info("------------------------------------------------------------------");

	}
	@Scheduled(cron = "0 1/3 * * * ?")
	public void insertLTCtoDBfromOKEX() throws Exception {
		logger.info("-----------------------------OKEX--------------------------------");
		okex.insertLTCtoDB();
		logger.info("------------------------------------------------------------------");
	}
	@Scheduled(cron = "0 2/3 * * * ?")
	public void insertETHtoDBfromOKEX() throws Exception {
		logger.info("-----------------------------OKEX--------------------------------");
		okex.insertETHtoDB();
		logger.info("------------------------------------------------------------------");
	}
	
	///////////////////////////////////////////
	// YOBIT			///////////////////////
	///////////////////////////////////////////

	@Scheduled(cron = "0 0/3 * * * ?")
	public void insertBTCtoDBfromYOBIT() throws Exception {
		logger.info("-----------------------------YOBIT--------------------------------");
		yobit.insertBTCtoDB();
		logger.info("------------------------------------------------------------------");
	}
	@Scheduled(cron = "0 1/3 * * * ?")
	public void insertLTCtoDBfromYOBIT() throws Exception {
		logger.info("-----------------------------YOBIT--------------------------------");
		yobit.insertLTCtoDB();
		logger.info("------------------------------------------------------------------");
	}
	@Scheduled(cron = "0 2/3 * * * ?")
	public void insertETHtoDBfromYOBIT() throws Exception {
		logger.info("-----------------------------YOBIT--------------------------------");
		yobit.insertETHtoDB();
		logger.info("------------------------------------------------------------------");
	}
	
	///////////////////////////////////////////
	// BITSTAMP			///////////////////////
	///////////////////////////////////////////
	
	@Scheduled(cron = "0 0/3 * * * ?")
	public void insertBTCtoDBfromBITSTAMP() throws Exception {
		logger.info("---------------------------BITSTAMP-------------------------------");
		bitstamp.insertBTCtoDB();
		logger.info("------------------------------------------------------------------");
	}
	
	///////////////////////////////////////////
	// BTCC				///////////////////////
	///////////////////////////////////////////	
	
	@Scheduled(cron = "0 0/3 * * * ?")
	public void insertBTCtoDBfromBTCC() throws Exception {
		logger.info("---------------------------BTCC-----------------------------------");
		btcc.insertBTCtoDB();
		logger.info("------------------------------------------------------------------");
	}
	
	
	///////////////////////////////////////////
	// COINMARKETCAP	///////////////////////
	///////////////////////////////////////////	 
	
	@Scheduled(cron = "0 0/3 * * * ?")
	public void insertBTCtoDBfromCOINMARKETCAP() throws Exception {
		logger.info("-------------------------COINMARKETCAP----------------------------");
		coinmarketcap.insertBTCtoDB();
		logger.info("------------------------------------------------------------------");
	}
	@Scheduled(cron = "0 1/3 * * * ?")
	public void insertLTCtoDBfromCOINMARKETCAP() throws Exception {
		logger.info("-------------------------COINMARKETCAP----------------------------");
		coinmarketcap.insertLTCtoDB();
		logger.info("------------------------------------------------------------------");
	}
	@Scheduled(cron = "0 2/3 * * * ?")
	public void insertETHtoDBfromCOINMARKETCAP() throws Exception {
		logger.info("-------------------------COINMARKETCAP----------------------------");
		coinmarketcap.insertETHtoDB();
		logger.info("------------------------------------------------------------------");
	}
}
