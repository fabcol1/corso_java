package test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;

public class ServerChat {

	public static void main(String[] args) throws IOException {
		ServerSocket serverSock = new ServerSocket(ClientChat.SERVER_SOCKET_PORT);
		InetAddress address = InetAddress.getLocalHost();
		System.out.println("##### SERVER HOSTNAME/IP: " + address + " #####");
		
		
		 while (true) {

				System.out.println("################################################");
				System.out.println("##### SERVER HOSTNAME/IP: " + address + " READY #####");
				System.out.println("Server socket started. Listening on port: " + ClientChat.SERVER_SOCKET_PORT);
				
				Socket client = serverSock.accept();
				InetAddress currentClientInetAddress = client.getInetAddress();
				System.out.println("Connection established with: " + currentClientInetAddress);
				
				BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
				String s;
	            while ((s = os.) != null) {
	                out.println(s);
	            }

	            // close IO streams, then socket
	            System.err.println("Closing connection with client");
	            out.close();
	            in.close();
	            clientSocket.close();
	        }
		 
		 

		


        // waits for data and reads it in until connection dies
        // readLine() blocks until the server receives a new line from client
        String s;
        while () {
            out.println(s);
        }
        
		while((s = in.readLine()) != null) {
			System.out.println("\n");

			Socket client = serverSock.accept();

			
			Scanner scanner = new Scanner(os);
			
			
			System.out.println(scanner.nextLine());
		}
	}
}
